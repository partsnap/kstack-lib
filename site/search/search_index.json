{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KStack Library","text":"<p>Infrastructure client library for PartSnap services.</p>"},{"location":"#overview","title":"Overview","text":"<p><code>kstack-lib</code> provides reusable components for Layer 2 services (like PartFinder) to connect to Layer 3 infrastructure (Redis, LocalStack) with automatic configuration discovery based on the active route.</p> <p>Key Features:</p> <ul> <li>Redis Client Factory: Auto-discovers Redis instances based on active route</li> <li>LocalStack Client Factory: Auto-discovers LocalStack endpoints for AWS emulation</li> <li>Route-based Configuration: Supports development, testing, staging, scratch routes</li> <li>Async/Sync Support: Automatically detects async context and returns appropriate client</li> <li>Vault &amp; K8s Integration: Reads configuration from vault files or Kubernetes secrets</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># With pip\npip install git+https://github.com/partsnap/kstack-lib.git\n\n# With uv\nuv add git+https://github.com/partsnap/kstack-lib.git\n</code></pre>"},{"location":"#redis-client-example","title":"Redis Client Example","text":"<pre><code>from kstack_lib import create_redis_client\n\n# Synchronous usage\nredis = create_redis_client(database='part-raw')\nredis.set('product:123', '{\"name\": \"Widget\"}')\nvalue = redis.get('product:123')\n\n# Async usage (automatically detected)\nimport asyncio\n\nasync def main():\n    redis = create_redis_client(database='part-raw')  # Returns async client\n    await redis.set('product:123', '{\"name\": \"Widget\"}')\n    value = await redis.get('product:123')\n    await redis.aclose()\n\nasyncio.run(main())\n</code></pre>"},{"location":"#localstack-client-example","title":"LocalStack Client Example","text":"<pre><code>from kstack_lib import create_localstack_client\n\n# Get boto3 S3 client configured for LocalStack\ns3 = create_localstack_client('s3')\ns3.list_buckets()\n\n# Async usage\nimport aioboto3\n\nasync def main():\n    s3 = create_localstack_client('s3')  # Returns aioboto3 session\n    async with s3 as client:\n        response = await client.list_buckets()\n        print(response['Buckets'])\n\nasyncio.run(main())\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#layer-separation","title":"Layer Separation","text":"<ul> <li>Layer 3 (Infrastructure): Redis, LocalStack instances per route</li> <li>Layer 2 (Services): PartFinder, other services using kstack-lib</li> <li>kstack-lib: Bridges Layer 2 \u2194 Layer 3 with configuration discovery</li> </ul> <p>Services depend on <code>kstack-lib</code>, NOT on <code>partsnap-kstack</code> (the deployment CLI).</p>"},{"location":"#route-based-configuration","title":"Route-Based Configuration","text":"<p>The library automatically discovers the active route from:</p> <ol> <li><code>KSTACK_ROUTE</code> environment variable (local development)</li> <li><code>kstack-route</code> ConfigMap in Kubernetes (deployed services)</li> <li>Defaults to <code>development</code></li> </ol> <p>Then reads configuration from:</p> <ol> <li> <p>Vault files (local development):    <pre><code>~/github/devops/partsnap-kstack/vault/dev/redis-cloud.yaml\n</code></pre></p> </li> <li> <p>Kubernetes Secrets (deployed):    <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-credentials-development\n  namespace: layer-3-cloud\ndata:\n  redis-host: &lt;base64&gt;\n  redis-port: &lt;base64&gt;\n  redis-username: &lt;base64&gt;\n  redis-password: &lt;base64&gt;\n</code></pre></p> </li> </ol>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started Guide</li> <li>Redis Client Documentation</li> <li>LocalStack Client Documentation</li> <li>Configuration Discovery</li> <li>API Reference</li> </ul>"},{"location":"#license","title":"License","text":"<p>Proprietary - PartSnap Inc.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to kstack-lib will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial release of kstack-lib</li> <li>Redis client factory with async/sync auto-detection</li> <li>LocalStack client factory for AWS service emulation</li> <li>Route-based configuration discovery (vault + K8s secrets)</li> <li>Comprehensive unit test coverage (52 tests)</li> <li>Full API documentation with mkdocs</li> <li>CI/CD workflow with GitHub Actions</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Automatic async context detection</li> <li>Support for <code>part-raw</code> and <code>part-audit</code> Redis databases</li> <li>LocalStack integration for S3, RDS, and other AWS services</li> <li>Vault file configuration for local development</li> <li>Kubernetes secret configuration for deployed services</li> <li>ConfigMap-based route discovery</li> </ul>"},{"location":"CHANGELOG/#001-2025-10-04","title":"[0.0.1] - 2025-10-04","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Initial library structure</li> <li>Basic client factories</li> <li>Configuration discovery system</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with <code>kstack-lib</code> in your PartSnap service.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#using-uv-recommended","title":"Using uv (Recommended)","text":"<pre><code># pyproject.toml\n[project]\ndependencies = [\n    \"kstack-lib @ git+https://github.com/partsnap/kstack-lib.git\",\n]\n</code></pre> <p>Then run: <pre><code>uv sync\n</code></pre></p>"},{"location":"getting-started/#using-pip","title":"Using pip","text":"<pre><code>pip install git+https://github.com/partsnap/kstack-lib.git\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#redis-client","title":"Redis Client","text":"<pre><code>from kstack_lib import create_redis_client\n\n# In a sync function\ndef get_cached_part(mpn: str):\n    redis = create_redis_client(database='part-raw')\n    return redis.get(mpn)\n\n# In an async function\nasync def cache_part(mpn: str, data: dict):\n    redis = create_redis_client(database='part-raw')\n    try:\n        await redis.setex(mpn, 3600, json.dumps(data))\n    finally:\n        await redis.aclose()\n</code></pre>"},{"location":"getting-started/#localstack-client","title":"LocalStack Client","text":"<pre><code>from kstack_lib import create_localstack_client\n\n# S3 client\ns3 = create_localstack_client('s3')\nbuckets = s3.list_buckets()\n\n# DynamoDB client (future)\ndynamodb = create_localstack_client('dynamodb')\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#local-development","title":"Local Development","text":"<p>Set the route environment variable:</p> <pre><code>export KSTACK_ROUTE=development\n</code></pre> <p>Create vault configuration file:</p> <pre><code>mkdir -p ~/github/devops/partsnap-kstack/vault/dev\n</code></pre> <pre><code># ~/github/devops/partsnap-kstack/vault/dev/redis-cloud.yaml\ndevelopment:\n  part-raw:\n    host: redis-development-raw.layer-3-cloud\n    port: 6379\n    username: default\n    password: partsnap-dev\n</code></pre>"},{"location":"getting-started/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>The library automatically reads from Kubernetes secrets:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-credentials-development\n  namespace: layer-3-cloud\ntype: Opaque\ndata:\n  redis-host: &lt;base64-encoded&gt;\n  redis-port: &lt;base64-encoded&gt;\n  redis-username: &lt;base64-encoded&gt;\n  redis-password: &lt;base64-encoded&gt;\n</code></pre> <p>Mount the <code>kstack-route</code> ConfigMap:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  template:\n    spec:\n      containers:\n      - name: my-service\n        envFrom:\n        - configMapRef:\n            name: kstack-route\n            namespace: layer-3-cloud\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Redis Client Guide</li> <li>LocalStack Client Guide</li> <li>Configuration Discovery</li> <li>API Reference</li> </ul>"},{"location":"api/clients/","title":"Clients API Reference","text":"<p>API documentation for client factories.</p>"},{"location":"api/clients/#redis-client","title":"Redis Client","text":""},{"location":"api/clients/#kstack_lib.clients.redis.create_redis_client","title":"<code>kstack_lib.clients.redis.create_redis_client(database='part-raw')</code>","text":"<p>Create a Redis client using automatic configuration discovery.</p> <p>Automatically detects whether the calling context is async and returns the appropriate client type (sync Redis or async Redis).</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Literal['part-raw', 'part-audit']</code> <p>Which database to connect to ('part-raw' or 'part-audit')</p> <code>'part-raw'</code> <p>Returns:</p> Type Description <code>Redis | Redis</code> <p>Redis or AsyncRedis client instance configured for the active route</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If redis package is not installed</p> <code>ValueError</code> <p>If configuration cannot be found</p> Example Source code in <code>kstack_lib/clients/redis.py</code> <pre><code>def create_redis_client(\n    database: Literal[\"part-raw\", \"part-audit\"] = \"part-raw\",\n) -&gt; \"Redis | AsyncRedis\":  # type: ignore[name-defined]\n    \"\"\"\n    Create a Redis client using automatic configuration discovery.\n\n    Automatically detects whether the calling context is async and returns\n    the appropriate client type (sync Redis or async Redis).\n\n    Args:\n        database: Which database to connect to ('part-raw' or 'part-audit')\n\n    Returns:\n        Redis or AsyncRedis client instance configured for the active route\n\n    Raises:\n        ImportError: If redis package is not installed\n        ValueError: If configuration cannot be found\n\n    Example:\n        # Sync usage - returns sync client\n        redis = create_redis_client(database='part-raw')\n        redis.set('key', 'value')\n\n        # Async usage - returns async client (detected automatically)\n        async def my_func():\n            redis = create_redis_client(database='part-raw')\n            await redis.set('key', 'value')\n            await redis.aclose()\n\n        # Works in all environments (development, testing, staging, production)\n        # Credentials come from vault or K8s Secrets automatically\n\n    \"\"\"\n    # Detect if we're in an async context\n    is_async = _is_async_context()\n\n    if is_async:\n        return _create_async_redis_client(database)\n    else:\n        return _create_sync_redis_client(database)\n</code></pre>"},{"location":"api/clients/#kstack_lib.clients.redis.create_redis_client--sync-usage-returns-sync-client","title":"Sync usage - returns sync client","text":"<p>redis = create_redis_client(database='part-raw') redis.set('key', 'value')</p>"},{"location":"api/clients/#kstack_lib.clients.redis.create_redis_client--async-usage-returns-async-client-detected-automatically","title":"Async usage - returns async client (detected automatically)","text":"<p>async def my_func():     redis = create_redis_client(database='part-raw')     await redis.set('key', 'value')     await redis.aclose()</p>"},{"location":"api/clients/#kstack_lib.clients.redis.create_redis_client--works-in-all-environments-development-testing-staging-production","title":"Works in all environments (development, testing, staging, production)","text":""},{"location":"api/clients/#kstack_lib.clients.redis.create_redis_client--credentials-come-from-vault-or-k8s-secrets-automatically","title":"Credentials come from vault or K8s Secrets automatically","text":""},{"location":"api/clients/#kstack_lib.clients.redis.get_redis_client","title":"<code>kstack_lib.clients.redis.get_redis_client(database='part-raw')</code>","text":"<p>Alias for create_redis_client() for backward compatibility.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Literal['part-raw', 'part-audit']</code> <p>Which database to connect to ('part-raw' or 'part-audit')</p> <code>'part-raw'</code> <p>Returns:</p> Type Description <code>Redis | Redis</code> <p>Redis client instance configured for the active route</p> Source code in <code>kstack_lib/clients/redis.py</code> <pre><code>def get_redis_client(\n    database: Literal[\"part-raw\", \"part-audit\"] = \"part-raw\",\n) -&gt; \"Redis | AsyncRedis\":  # type: ignore[name-defined]\n    \"\"\"\n    Alias for create_redis_client() for backward compatibility.\n\n    Args:\n        database: Which database to connect to ('part-raw' or 'part-audit')\n\n    Returns:\n        Redis client instance configured for the active route\n\n    \"\"\"\n    return create_redis_client(database=database)\n</code></pre>"},{"location":"api/clients/#localstack-client","title":"LocalStack Client","text":""},{"location":"api/clients/#kstack_lib.clients.localstack.create_localstack_client","title":"<code>kstack_lib.clients.localstack.create_localstack_client(service_name, route=None)</code>","text":"<p>Create an AWS client connected to LocalStack using automatic configuration discovery.</p> <p>Automatically detects whether the calling context is async and returns the appropriate client type (boto3 for sync, aioboto3 for async).</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>AWS service name (e.g., 's3', 'sqs', 'sns', 'rds', 'dynamodb')</p> required <code>route</code> <code>str | None</code> <p>Optional route override (defaults to active route from KSTACK_ROUTE)</p> <code>None</code> <p>Returns:</p> Type Description <code>Any | Any</code> <p>boto3 client (sync) or aioboto3 client context manager (async)</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If boto3/aioboto3 packages are not installed</p> <code>ValueError</code> <p>If configuration cannot be found</p> Example Source code in <code>kstack_lib/clients/localstack.py</code> <pre><code>def create_localstack_client(\n    service_name: str,\n    route: str | None = None,\n) -&gt; Any | Any:  # boto3.client or aioboto3.Session.client\n    \"\"\"\n    Create an AWS client connected to LocalStack using automatic configuration discovery.\n\n    Automatically detects whether the calling context is async and returns\n    the appropriate client type (boto3 for sync, aioboto3 for async).\n\n    Args:\n        service_name: AWS service name (e.g., 's3', 'sqs', 'sns', 'rds', 'dynamodb')\n        route: Optional route override (defaults to active route from KSTACK_ROUTE)\n\n    Returns:\n        boto3 client (sync) or aioboto3 client context manager (async)\n\n    Raises:\n        ImportError: If boto3/aioboto3 packages are not installed\n        ValueError: If configuration cannot be found\n\n    Example:\n        # Sync usage - returns boto3 client\n        s3 = create_localstack_client('s3')\n        buckets = s3.list_buckets()\n\n        # Async usage - returns aioboto3 client (detected automatically)\n        async def my_func():\n            s3_client = create_localstack_client('s3')\n            async with s3_client as s3:\n                response = await s3.list_buckets()\n\n        # Works with all AWS services supported by LocalStack:\n        # - s3, sqs, sns, lambda, dynamodb, rds, ec2, etc.\n\n    \"\"\"\n    # Detect if we're in an async context\n    is_async = _is_async_context()\n\n    if is_async:\n        return _create_async_localstack_client(service_name, route)\n    else:\n        return _create_sync_localstack_client(service_name, route)\n</code></pre>"},{"location":"api/clients/#kstack_lib.clients.localstack.create_localstack_client--sync-usage-returns-boto3-client","title":"Sync usage - returns boto3 client","text":"<p>s3 = create_localstack_client('s3') buckets = s3.list_buckets()</p>"},{"location":"api/clients/#kstack_lib.clients.localstack.create_localstack_client--async-usage-returns-aioboto3-client-detected-automatically","title":"Async usage - returns aioboto3 client (detected automatically)","text":"<p>async def my_func():     s3_client = create_localstack_client('s3')     async with s3_client as s3:         response = await s3.list_buckets()</p>"},{"location":"api/clients/#kstack_lib.clients.localstack.create_localstack_client--works-with-all-aws-services-supported-by-localstack","title":"Works with all AWS services supported by LocalStack:","text":""},{"location":"api/clients/#kstack_lib.clients.localstack.create_localstack_client---s3-sqs-sns-lambda-dynamodb-rds-ec2-etc","title":"- s3, sqs, sns, lambda, dynamodb, rds, ec2, etc.","text":""},{"location":"api/clients/#kstack_lib.clients.localstack.get_localstack_client","title":"<code>kstack_lib.clients.localstack.get_localstack_client(service_name, route=None)</code>","text":"<p>Alias for create_localstack_client() for backward compatibility.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>AWS service name</p> required <code>route</code> <code>str | None</code> <p>Optional route override</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>boto3/aioboto3 client instance</p> Source code in <code>kstack_lib/clients/localstack.py</code> <pre><code>def get_localstack_client(service_name: str, route: str | None = None) -&gt; Any:\n    \"\"\"\n    Alias for create_localstack_client() for backward compatibility.\n\n    Args:\n        service_name: AWS service name\n        route: Optional route override\n\n    Returns:\n        boto3/aioboto3 client instance\n\n    \"\"\"\n    return create_localstack_client(service_name, route)\n</code></pre>"},{"location":"api/config/","title":"Configuration API Reference","text":"<p>API documentation for configuration discovery.</p>"},{"location":"api/config/#redis-configuration","title":"Redis Configuration","text":""},{"location":"api/config/#kstack_lib.config.redis.RedisDiscovery","title":"<code>kstack_lib.config.redis.RedisDiscovery</code>","text":"<p>Discovers Redis configuration based on active KStack route.</p> Source code in <code>kstack_lib/config/redis.py</code> <pre><code>class RedisDiscovery:\n    \"\"\"Discovers Redis configuration based on active KStack route.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize RedisDiscovery.\"\"\"\n        self.kstack_root = Path(__file__).parent.parent.parent\n        self.vault_dir = self.kstack_root / \"vault\" / \"dev\"\n\n    def get_active_route(self) -&gt; str:\n        \"\"\"\n        Get the currently active KStack route.\n\n        Returns:\n            Active route name (e.g., 'development', 'staging', 'production')\n\n        Raises:\n            RuntimeError: If route cannot be determined\n\n        \"\"\"\n        # Check environment variable first\n        route = os.environ.get(\"KSTACK_ROUTE\")\n        if route:\n            return route\n\n        # Try to get from kubectl context (route is stored in ConfigMap)\n        try:\n            result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"configmap\",\n                    \"kstack-route\",\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    \"jsonpath={.data.active-route}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=True,\n            )\n            route = result.stdout.strip()\n            if route:\n                return route\n        except (subprocess.CalledProcessError, FileNotFoundError):\n            pass\n\n        # Default to development for local development\n        return \"development\"\n\n    def get_redis_config(\n        self, database: Literal[\"part-raw\", \"part-audit\"] = \"part-raw\",\n    ) -&gt; RedisConfig:\n        \"\"\"\n        Get Redis configuration for the active route.\n\n        Args:\n            database: Which database to connect to ('part-raw' or 'part-audit')\n\n        Returns:\n            RedisConfig with host, port, username, password\n\n        Raises:\n            ValueError: If configuration not found\n            FileNotFoundError: If vault files not found\n\n        \"\"\"\n        active_route = self.get_active_route()\n\n        # Try to read from decrypted vault file first\n        vault_file = self.vault_dir / \"redis-cloud.yaml\"\n        if vault_file.exists():\n            with open(vault_file) as f:\n                vault_data = yaml.safe_load(f)\n\n            if active_route in vault_data and database in vault_data[active_route]:\n                config = vault_data[active_route][database]\n                return RedisConfig(\n                    host=config[\"host\"],\n                    port=int(config[\"port\"]),\n                    username=config.get(\"username\", \"default\"),\n                    password=config[\"password\"],\n                )\n\n        # Fall back to reading from Kubernetes Secret (for deployed environments)\n        try:\n            secret_name = f\"redis-credentials-{active_route}\"\n            prefix = \"audit-\" if database == \"part-audit\" else \"\"\n\n            # Get values from K8s Secret\n            host_result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"secret\",\n                    secret_name,\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    f\"jsonpath={{.data.{prefix}redis-host}}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=True,\n            )\n\n            port_result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"secret\",\n                    secret_name,\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    f\"jsonpath={{.data.{prefix}redis-port}}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=True,\n            )\n\n            username_result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"secret\",\n                    secret_name,\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    f\"jsonpath={{.data.{prefix}redis-username}}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=True,\n            )\n\n            password_result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"secret\",\n                    secret_name,\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    f\"jsonpath={{.data.{prefix}redis-password}}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=True,\n            )\n\n            # Decode base64 values\n            import base64\n\n            host = base64.b64decode(host_result.stdout.strip()).decode()\n            port = int(base64.b64decode(port_result.stdout.strip()).decode())\n            username = base64.b64decode(username_result.stdout.strip()).decode()\n            password = base64.b64decode(password_result.stdout.strip()).decode()\n\n            return RedisConfig(host=host, port=port, username=username, password=password)\n\n        except (subprocess.CalledProcessError, FileNotFoundError):\n            pass\n\n        raise ValueError(\n            f\"Redis configuration not found for route '{active_route}' and database '{database}'. \"\n            f\"Please ensure vault is configured or secrets are deployed.\",\n        )\n</code></pre>"},{"location":"api/config/#kstack_lib.config.redis.RedisDiscovery-functions","title":"Functions","text":""},{"location":"api/config/#kstack_lib.config.redis.RedisDiscovery.get_active_route","title":"<code>get_active_route()</code>","text":"<p>Get the currently active KStack route.</p> <p>Returns:</p> Type Description <code>str</code> <p>Active route name (e.g., 'development', 'staging', 'production')</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If route cannot be determined</p> Source code in <code>kstack_lib/config/redis.py</code> <pre><code>def get_active_route(self) -&gt; str:\n    \"\"\"\n    Get the currently active KStack route.\n\n    Returns:\n        Active route name (e.g., 'development', 'staging', 'production')\n\n    Raises:\n        RuntimeError: If route cannot be determined\n\n    \"\"\"\n    # Check environment variable first\n    route = os.environ.get(\"KSTACK_ROUTE\")\n    if route:\n        return route\n\n    # Try to get from kubectl context (route is stored in ConfigMap)\n    try:\n        result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"configmap\",\n                \"kstack-route\",\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                \"jsonpath={.data.active-route}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        route = result.stdout.strip()\n        if route:\n            return route\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        pass\n\n    # Default to development for local development\n    return \"development\"\n</code></pre>"},{"location":"api/config/#kstack_lib.config.redis.RedisDiscovery.get_redis_config","title":"<code>get_redis_config(database='part-raw')</code>","text":"<p>Get Redis configuration for the active route.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Literal['part-raw', 'part-audit']</code> <p>Which database to connect to ('part-raw' or 'part-audit')</p> <code>'part-raw'</code> <p>Returns:</p> Type Description <code>RedisConfig</code> <p>RedisConfig with host, port, username, password</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If configuration not found</p> <code>FileNotFoundError</code> <p>If vault files not found</p> Source code in <code>kstack_lib/config/redis.py</code> <pre><code>def get_redis_config(\n    self, database: Literal[\"part-raw\", \"part-audit\"] = \"part-raw\",\n) -&gt; RedisConfig:\n    \"\"\"\n    Get Redis configuration for the active route.\n\n    Args:\n        database: Which database to connect to ('part-raw' or 'part-audit')\n\n    Returns:\n        RedisConfig with host, port, username, password\n\n    Raises:\n        ValueError: If configuration not found\n        FileNotFoundError: If vault files not found\n\n    \"\"\"\n    active_route = self.get_active_route()\n\n    # Try to read from decrypted vault file first\n    vault_file = self.vault_dir / \"redis-cloud.yaml\"\n    if vault_file.exists():\n        with open(vault_file) as f:\n            vault_data = yaml.safe_load(f)\n\n        if active_route in vault_data and database in vault_data[active_route]:\n            config = vault_data[active_route][database]\n            return RedisConfig(\n                host=config[\"host\"],\n                port=int(config[\"port\"]),\n                username=config.get(\"username\", \"default\"),\n                password=config[\"password\"],\n            )\n\n    # Fall back to reading from Kubernetes Secret (for deployed environments)\n    try:\n        secret_name = f\"redis-credentials-{active_route}\"\n        prefix = \"audit-\" if database == \"part-audit\" else \"\"\n\n        # Get values from K8s Secret\n        host_result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"secret\",\n                secret_name,\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                f\"jsonpath={{.data.{prefix}redis-host}}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        port_result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"secret\",\n                secret_name,\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                f\"jsonpath={{.data.{prefix}redis-port}}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        username_result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"secret\",\n                secret_name,\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                f\"jsonpath={{.data.{prefix}redis-username}}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        password_result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"secret\",\n                secret_name,\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                f\"jsonpath={{.data.{prefix}redis-password}}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        # Decode base64 values\n        import base64\n\n        host = base64.b64decode(host_result.stdout.strip()).decode()\n        port = int(base64.b64decode(port_result.stdout.strip()).decode())\n        username = base64.b64decode(username_result.stdout.strip()).decode()\n        password = base64.b64decode(password_result.stdout.strip()).decode()\n\n        return RedisConfig(host=host, port=port, username=username, password=password)\n\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        pass\n\n    raise ValueError(\n        f\"Redis configuration not found for route '{active_route}' and database '{database}'. \"\n        f\"Please ensure vault is configured or secrets are deployed.\",\n    )\n</code></pre>"},{"location":"api/config/#kstack_lib.config.redis.get_redis_config","title":"<code>kstack_lib.config.redis.get_redis_config(database='part-raw')</code>","text":"<p>Get Redis configuration for the active route.</p> <p>Convenience function for getting Redis config without instantiating RedisDiscovery.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Literal['part-raw', 'part-audit']</code> <p>Which database to connect to ('part-raw' or 'part-audit')</p> <code>'part-raw'</code> <p>Returns:</p> Type Description <code>RedisConfig</code> <p>RedisConfig with host, port, username, password</p> Example <p>config = get_redis_config(database='part-raw') redis_client = Redis(**config)</p> Source code in <code>kstack_lib/config/redis.py</code> <pre><code>def get_redis_config(\n    database: Literal[\"part-raw\", \"part-audit\"] = \"part-raw\",\n) -&gt; RedisConfig:\n    \"\"\"\n    Get Redis configuration for the active route.\n\n    Convenience function for getting Redis config without instantiating RedisDiscovery.\n\n    Args:\n        database: Which database to connect to ('part-raw' or 'part-audit')\n\n    Returns:\n        RedisConfig with host, port, username, password\n\n    Example:\n        config = get_redis_config(database='part-raw')\n        redis_client = Redis(**config)\n\n    \"\"\"\n    discovery = RedisDiscovery()\n    return discovery.get_redis_config(database=database)\n</code></pre>"},{"location":"api/config/#localstack-configuration","title":"LocalStack Configuration","text":""},{"location":"api/config/#kstack_lib.config.localstack.LocalStackDiscovery","title":"<code>kstack_lib.config.localstack.LocalStackDiscovery</code>","text":"<p>Discover and manage LocalStack configuration based on active route.</p> <p>LocalStack instances are deployed per-route (development, testing, scratch, etc.) and provide AWS service emulation (S3, SQS, SNS, RDS, Lambda, etc.).</p> Example <p>discovery = LocalStackDiscovery() route = discovery.get_active_route()  # \u2192 \"development\" config = discovery.get_localstack_config()  # \u2192 {\"endpoint_url\": \"http://...\", ...}</p> Source code in <code>kstack_lib/config/localstack.py</code> <pre><code>class LocalStackDiscovery:\n    \"\"\"\n    Discover and manage LocalStack configuration based on active route.\n\n    LocalStack instances are deployed per-route (development, testing, scratch, etc.)\n    and provide AWS service emulation (S3, SQS, SNS, RDS, Lambda, etc.).\n\n    Example:\n        discovery = LocalStackDiscovery()\n        route = discovery.get_active_route()  # \u2192 \"development\"\n        config = discovery.get_localstack_config()  # \u2192 {\"endpoint_url\": \"http://...\", ...}\n\n    \"\"\"\n\n    def __init__(self, vault_dir: Path | None = None):\n        \"\"\"\n        Initialize LocalStack discovery.\n\n        Args:\n            vault_dir: Path to vault directory (defaults to ./vault/dev)\n\n        \"\"\"\n        if vault_dir is None:\n            vault_dir = Path.cwd() / \"vault\" / \"dev\"\n        self.vault_dir = Path(vault_dir)\n\n    def get_active_route(self) -&gt; str:\n        \"\"\"\n        Determine which route/environment is currently active.\n\n        Priority:\n        1. KSTACK_ROUTE environment variable (for local development)\n        2. kstack-route ConfigMap in Kubernetes (for K8s deployments)\n        3. Default to \"development\"\n\n        Returns:\n            Active route name (e.g., \"development\", \"testing\", \"scratch\")\n\n        \"\"\"\n        # Priority 1: Environment variable (local dev override)\n        route = os.environ.get(\"KSTACK_ROUTE\")\n        if route:\n            return route\n\n        # Priority 2: Kubernetes ConfigMap (inside K8s)\n        try:\n            result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"configmap\",\n                    \"kstack-route\",\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    \"jsonpath={.data.active-route}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=False,\n            )\n            if result.returncode == 0 and result.stdout.strip():\n                return result.stdout.strip()\n        except FileNotFoundError:\n            pass\n\n        # Priority 3: Default\n        return \"development\"\n\n    def get_localstack_config(self, route: str | None = None) -&gt; dict[str, Any]:\n        \"\"\"\n        Get LocalStack configuration for the active route.\n\n        Args:\n            route: Optional route override (uses active route if not specified)\n\n        Returns:\n            Dictionary with LocalStack configuration:\n            - endpoint_url: LocalStack endpoint (e.g., \"http://localstack-development.layer-3-cloud:4566\")\n            - aws_access_key_id: AWS access key (usually \"test\")\n            - aws_secret_access_key: AWS secret key (usually \"test\")\n            - region_name: AWS region (usually \"us-east-1\")\n\n        Raises:\n            ValueError: If configuration cannot be found\n\n        \"\"\"\n        if route is None:\n            route = self.get_active_route()\n\n        # Try reading from vault file (local development)\n        vault_file = self.vault_dir / \"localstack-cloud.yaml\"\n        if vault_file.exists():\n            try:\n                with vault_file.open(\"r\") as f:\n                    vault_data = yaml.safe_load(f)\n                    if route in vault_data:\n                        return vault_data[route]\n            except Exception:\n                pass\n\n        # Try reading from Kubernetes Secret (inside K8s)\n        try:\n            secret_name = f\"localstack-credentials-{route}\"\n            result = subprocess.run(\n                [\n                    \"kubectl\",\n                    \"get\",\n                    \"secret\",\n                    secret_name,\n                    \"-n\",\n                    \"layer-3-cloud\",\n                    \"-o\",\n                    \"jsonpath={.data}\",\n                ],\n                capture_output=True,\n                text=True,\n                check=False,\n            )\n            if result.returncode == 0:\n                import base64\n                import json\n\n                secret_data = json.loads(result.stdout)\n                return {\n                    \"endpoint_url\": base64.b64decode(secret_data[\"endpoint-url\"]).decode(),\n                    \"aws_access_key_id\": base64.b64decode(secret_data.get(\"aws-access-key-id\", b\"test\")).decode(),\n                    \"aws_secret_access_key\": base64.b64decode(\n                        secret_data.get(\"aws-secret-access-key\", b\"test\"),\n                    ).decode(),\n                    \"region_name\": base64.b64decode(secret_data.get(\"region-name\", b\"us-east-1\")).decode(),\n                }\n        except Exception:\n            pass\n\n        # Fallback: Construct default configuration based on route\n        return {\n            \"endpoint_url\": f\"http://localstack-{route}.layer-3-cloud:4566\",\n            \"aws_access_key_id\": \"test\",\n            \"aws_secret_access_key\": \"test\",\n            \"region_name\": \"us-east-1\",\n        }\n</code></pre>"},{"location":"api/config/#kstack_lib.config.localstack.LocalStackDiscovery-functions","title":"Functions","text":""},{"location":"api/config/#kstack_lib.config.localstack.LocalStackDiscovery.get_active_route","title":"<code>get_active_route()</code>","text":"<p>Determine which route/environment is currently active.</p> <p>Priority: 1. KSTACK_ROUTE environment variable (for local development) 2. kstack-route ConfigMap in Kubernetes (for K8s deployments) 3. Default to \"development\"</p> <p>Returns:</p> Type Description <code>str</code> <p>Active route name (e.g., \"development\", \"testing\", \"scratch\")</p> Source code in <code>kstack_lib/config/localstack.py</code> <pre><code>def get_active_route(self) -&gt; str:\n    \"\"\"\n    Determine which route/environment is currently active.\n\n    Priority:\n    1. KSTACK_ROUTE environment variable (for local development)\n    2. kstack-route ConfigMap in Kubernetes (for K8s deployments)\n    3. Default to \"development\"\n\n    Returns:\n        Active route name (e.g., \"development\", \"testing\", \"scratch\")\n\n    \"\"\"\n    # Priority 1: Environment variable (local dev override)\n    route = os.environ.get(\"KSTACK_ROUTE\")\n    if route:\n        return route\n\n    # Priority 2: Kubernetes ConfigMap (inside K8s)\n    try:\n        result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"configmap\",\n                \"kstack-route\",\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                \"jsonpath={.data.active-route}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=False,\n        )\n        if result.returncode == 0 and result.stdout.strip():\n            return result.stdout.strip()\n    except FileNotFoundError:\n        pass\n\n    # Priority 3: Default\n    return \"development\"\n</code></pre>"},{"location":"api/config/#kstack_lib.config.localstack.LocalStackDiscovery.get_localstack_config","title":"<code>get_localstack_config(route=None)</code>","text":"<p>Get LocalStack configuration for the active route.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>str | None</code> <p>Optional route override (uses active route if not specified)</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with LocalStack configuration:</p> <code>dict[str, Any]</code> <ul> <li>endpoint_url: LocalStack endpoint (e.g., \"http://localstack-development.layer-3-cloud:4566\")</li> </ul> <code>dict[str, Any]</code> <ul> <li>aws_access_key_id: AWS access key (usually \"test\")</li> </ul> <code>dict[str, Any]</code> <ul> <li>aws_secret_access_key: AWS secret key (usually \"test\")</li> </ul> <code>dict[str, Any]</code> <ul> <li>region_name: AWS region (usually \"us-east-1\")</li> </ul> <p>Raises:</p> Type Description <code>ValueError</code> <p>If configuration cannot be found</p> Source code in <code>kstack_lib/config/localstack.py</code> <pre><code>def get_localstack_config(self, route: str | None = None) -&gt; dict[str, Any]:\n    \"\"\"\n    Get LocalStack configuration for the active route.\n\n    Args:\n        route: Optional route override (uses active route if not specified)\n\n    Returns:\n        Dictionary with LocalStack configuration:\n        - endpoint_url: LocalStack endpoint (e.g., \"http://localstack-development.layer-3-cloud:4566\")\n        - aws_access_key_id: AWS access key (usually \"test\")\n        - aws_secret_access_key: AWS secret key (usually \"test\")\n        - region_name: AWS region (usually \"us-east-1\")\n\n    Raises:\n        ValueError: If configuration cannot be found\n\n    \"\"\"\n    if route is None:\n        route = self.get_active_route()\n\n    # Try reading from vault file (local development)\n    vault_file = self.vault_dir / \"localstack-cloud.yaml\"\n    if vault_file.exists():\n        try:\n            with vault_file.open(\"r\") as f:\n                vault_data = yaml.safe_load(f)\n                if route in vault_data:\n                    return vault_data[route]\n        except Exception:\n            pass\n\n    # Try reading from Kubernetes Secret (inside K8s)\n    try:\n        secret_name = f\"localstack-credentials-{route}\"\n        result = subprocess.run(\n            [\n                \"kubectl\",\n                \"get\",\n                \"secret\",\n                secret_name,\n                \"-n\",\n                \"layer-3-cloud\",\n                \"-o\",\n                \"jsonpath={.data}\",\n            ],\n            capture_output=True,\n            text=True,\n            check=False,\n        )\n        if result.returncode == 0:\n            import base64\n            import json\n\n            secret_data = json.loads(result.stdout)\n            return {\n                \"endpoint_url\": base64.b64decode(secret_data[\"endpoint-url\"]).decode(),\n                \"aws_access_key_id\": base64.b64decode(secret_data.get(\"aws-access-key-id\", b\"test\")).decode(),\n                \"aws_secret_access_key\": base64.b64decode(\n                    secret_data.get(\"aws-secret-access-key\", b\"test\"),\n                ).decode(),\n                \"region_name\": base64.b64decode(secret_data.get(\"region-name\", b\"us-east-1\")).decode(),\n            }\n    except Exception:\n        pass\n\n    # Fallback: Construct default configuration based on route\n    return {\n        \"endpoint_url\": f\"http://localstack-{route}.layer-3-cloud:4566\",\n        \"aws_access_key_id\": \"test\",\n        \"aws_secret_access_key\": \"test\",\n        \"region_name\": \"us-east-1\",\n    }\n</code></pre>"},{"location":"api/config/#kstack_lib.config.localstack.get_localstack_config","title":"<code>kstack_lib.config.localstack.get_localstack_config(route=None)</code>","text":"<p>Get LocalStack configuration for the active route.</p> <p>Convenience function that creates a LocalStackDiscovery instance and retrieves configuration.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>str | None</code> <p>Optional route override (uses active route if not specified)</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with LocalStack configuration</p> Example <p>config = get_localstack_config()</p> Source code in <code>kstack_lib/config/localstack.py</code> <pre><code>def get_localstack_config(route: str | None = None) -&gt; dict[str, Any]:\n    \"\"\"\n    Get LocalStack configuration for the active route.\n\n    Convenience function that creates a LocalStackDiscovery instance and\n    retrieves configuration.\n\n    Args:\n        route: Optional route override (uses active route if not specified)\n\n    Returns:\n        Dictionary with LocalStack configuration\n\n    Example:\n        config = get_localstack_config()\n        # \u2192 {\"endpoint_url\": \"http://localstack-development...\", ...}\n\n        config = get_localstack_config(route=\"testing\")\n        # \u2192 {\"endpoint_url\": \"http://localstack-testing...\", ...}\n\n    \"\"\"\n    discovery = LocalStackDiscovery()\n    return discovery.get_localstack_config(route=route)\n</code></pre>"},{"location":"api/config/#kstack_lib.config.localstack.get_localstack_config--_1","title":"\u2192","text":"<p>config = get_localstack_config(route=\"testing\")</p>"},{"location":"api/config/#kstack_lib.config.localstack.get_localstack_config--_2","title":"\u2192","text":""},{"location":"development/contributing/","title":"Contributing","text":"<p>Guide for contributing to kstack-lib.</p>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/partsnap/kstack-lib.git\ncd kstack-lib\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>uv sync\n</code></pre></p> </li> <li> <p>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all unit tests\nuv run pytest tests/ -v -m unit\n\n# Run with coverage\nuv run pytest tests/ -v -m unit --cov=kstack_lib --cov-report=term\n\n# Run specific test file\nuv run pytest tests/test_redis_client.py -v\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use ruff for linting and formatting:</p> <pre><code># Check code style\nuv run ruff check kstack_lib tests\n\n# Auto-fix issues\nuv run ruff check kstack_lib tests --fix\n\n# Format code\nuv run ruff format kstack_lib tests\n</code></pre>"},{"location":"development/contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking:</p> <pre><code>uv run mypy kstack_lib\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>Build and serve documentation locally:</p> <pre><code>uv run mkdocs serve\n# Visit http://127.0.0.1:8100\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/my-feature\n</code></pre></p> </li> <li> <p>Make your changes</p> </li> <li> <p>Run tests and linters:    <pre><code>uv run pytest tests/ -v -m unit\nuv run ruff check kstack_lib tests\nuv run mypy kstack_lib\n</code></pre></p> </li> <li> <p>Commit with descriptive message:    <pre><code>git commit -m \"Add feature: XYZ\"\n</code></pre></p> </li> <li> <p>Push and create PR:    <pre><code>git push origin feature/my-feature\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#code-guidelines","title":"Code Guidelines","text":"<ul> <li>Write unit tests for all new features</li> <li>Maintain &gt;80% test coverage</li> <li>Add docstrings to all public functions/classes</li> <li>Follow existing code style and patterns</li> <li>Update documentation for API changes</li> </ul>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Use <code>@pytest.mark.unit</code> for unit tests</li> <li>Mock external dependencies (Redis, Kubernetes, etc.)</li> <li>Test both sync and async code paths</li> <li>Test error handling and edge cases</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>Comprehensive testing guide for kstack-lib.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 test_redis_client.py      # Redis client tests\n\u251c\u2500\u2500 test_redis_config.py       # Redis config tests\n\u251c\u2500\u2500 test_localstack_client.py  # LocalStack client tests\n\u2514\u2500\u2500 test_localstack_config.py  # LocalStack config tests\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#all-tests","title":"All Tests","text":"<pre><code>uv run pytest tests/ -v -m unit\n</code></pre>"},{"location":"development/testing/#specific-test-file","title":"Specific Test File","text":"<pre><code>uv run pytest tests/test_redis_client.py -v\n</code></pre>"},{"location":"development/testing/#specific-test-function","title":"Specific Test Function","text":"<pre><code>uv run pytest tests/test_redis_client.py::test_create_sync_redis_client_part_raw -v\n</code></pre>"},{"location":"development/testing/#with-coverage","title":"With Coverage","text":"<pre><code>uv run pytest tests/ -v -m unit \\\n  --cov=kstack_lib \\\n  --cov-report=term \\\n  --cov-report=html\n</code></pre> <p>View HTML coverage report: <pre><code>open htmlcov/index.html\n</code></pre></p>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":""},{"location":"development/testing/#unit-tests","title":"Unit Tests","text":"<p>Fast tests with no external dependencies. All external services are mocked.</p> <pre><code>@pytest.mark.unit\ndef test_create_sync_redis_client():\n    with patch('kstack_lib.clients.redis.get_redis_config') as mock_config:\n        mock_config.return_value = {\n            \"host\": \"localhost\",\n            \"port\": 6379,\n            \"username\": \"default\",\n            \"password\": \"test\"\n        }\n        # Test implementation...\n</code></pre>"},{"location":"development/testing/#integration-tests-future","title":"Integration Tests (Future)","text":"<p>Tests that require real infrastructure:</p> <pre><code>@pytest.mark.integration\nasync def test_real_redis_connection():\n    redis = create_redis_client(database='part-raw')\n    await redis.set('test-key', 'test-value')\n    value = await redis.get('test-key')\n    assert value == 'test-value'\n</code></pre> <p>Run only unit tests (CI/CD): <pre><code>uv run pytest tests/ -v -m unit\n</code></pre></p> <p>Run integration tests (manual): <pre><code>uv run pytest tests/ -v -m integration\n</code></pre></p>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":""},{"location":"development/testing/#temporary-vault-files","title":"Temporary Vault Files","text":"<pre><code>@pytest.fixture\ndef temp_vault_file(tmp_path):\n    \"\"\"Create temporary vault file for testing.\"\"\"\n    vault_dir = tmp_path / \"vault\" / \"dev\"\n    vault_dir.mkdir(parents=True)\n\n    vault_data = {\n        \"development\": {\n            \"part-raw\": {\n                \"host\": \"redis-development.local\",\n                \"port\": 6379,\n                \"username\": \"default\",\n                \"password\": \"test\"\n            }\n        }\n    }\n\n    vault_file = vault_dir / \"redis-cloud.yaml\"\n    with open(vault_file, \"w\") as f:\n        yaml.dump(vault_data, f)\n\n    return tmp_path\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":""},{"location":"development/testing/#mock-configuration","title":"Mock Configuration","text":"<pre><code>from unittest.mock import patch, MagicMock\n\n@patch('kstack_lib.config.redis.get_redis_config')\ndef test_with_mock_config(mock_config):\n    mock_config.return_value = {\n        \"host\": \"localhost\",\n        \"port\": 6379,\n        \"username\": \"default\",\n        \"password\": \"test\"\n    }\n    # Test code...\n</code></pre>"},{"location":"development/testing/#mock-redis-client","title":"Mock Redis Client","text":"<pre><code>@patch('redis.Redis')\ndef test_redis_operations(mock_redis):\n    mock_client = MagicMock()\n    mock_redis.return_value = mock_client\n    mock_client.get.return_value = b'{\"key\": \"value\"}'\n\n    # Test code...\n    mock_client.get.assert_called_once_with('test-key')\n</code></pre>"},{"location":"development/testing/#mock-kubernetes","title":"Mock Kubernetes","text":"<pre><code>@patch('subprocess.run')\ndef test_kubernetes_configmap(mock_run):\n    mock_result = MagicMock(returncode=0, stdout=\"development\")\n    mock_run.return_value = mock_result\n\n    # Test code...\n</code></pre>"},{"location":"development/testing/#coverage-requirements","title":"Coverage Requirements","text":"<p>Minimum coverage: 80%</p> <p>Current coverage: - <code>kstack_lib/clients/redis.py</code>: 100% - <code>kstack_lib/clients/localstack.py</code>: 100% - <code>kstack_lib/config/redis.py</code>: 100% - <code>kstack_lib/config/localstack.py</code>: 100%</p>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Tests run automatically on: - Every push to main - Every pull request - Manual workflow dispatch</p> <p>See <code>.github/workflows/test.yml</code> for CI configuration.</p>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":"<ol> <li>Mock all external dependencies - Redis, Kubernetes, file system</li> <li>Test both success and failure paths</li> <li>Test edge cases - empty config, missing files, network errors</li> <li>Use descriptive test names - <code>test_create_sync_redis_client_part_raw</code></li> <li>Keep tests fast - Mock slow operations</li> <li>Test async and sync separately - Different code paths</li> <li>Clean up resources - Use fixtures with proper teardown</li> </ol>"},{"location":"guide/configuration/","title":"Configuration Discovery","text":"<p>How kstack-lib discovers and loads configuration for Layer 3 services.</p>"},{"location":"guide/configuration/#overview","title":"Overview","text":"<p>Configuration discovery follows a hierarchical approach:</p> <ol> <li>Determine active route</li> <li>Read configuration from available sources</li> <li>Return configured client</li> </ol>"},{"location":"guide/configuration/#route-discovery","title":"Route Discovery","text":"<p>The active route is determined from these sources (in order):</p>"},{"location":"guide/configuration/#1-environment-variable-highest-priority","title":"1. Environment Variable (Highest Priority)","text":"<pre><code>export KSTACK_ROUTE=development\n</code></pre>"},{"location":"guide/configuration/#2-kubernetes-configmap","title":"2. Kubernetes ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kstack-route\n  namespace: layer-3-cloud\ndata:\n  active-route: development\n</code></pre> <p>Accessed via: <pre><code>kubectl get configmap kstack-route -n layer-3-cloud \\\n  -o jsonpath='{.data.active-route}'\n</code></pre></p>"},{"location":"guide/configuration/#3-default-value","title":"3. Default Value","text":"<p>If neither source is available, defaults to <code>development</code>.</p>"},{"location":"guide/configuration/#configuration-sources","title":"Configuration Sources","text":"<p>Once the route is determined, configuration is loaded from:</p>"},{"location":"guide/configuration/#local-development-vault-files","title":"Local Development - Vault Files","text":"<p>Location: <code>~/github/devops/partsnap-kstack/vault/dev/</code></p> <p>Redis Configuration: <pre><code># redis-cloud.yaml\ndevelopment:\n  part-raw:\n    host: redis-development-raw.layer-3-cloud\n    port: 6379\n    username: default\n    password: partsnap-dev\n  part-audit:\n    host: redis-development-audit.layer-3-cloud\n    port: 6379\n    username: default\n    password: partsnap-dev\n\ntesting:\n  part-raw:\n    host: redis-testing-raw.layer-3-cloud\n    port: 6379\n    username: default\n    password: partsnap-test\n</code></pre></p> <p>LocalStack Configuration: <pre><code># localstack.yaml\ndevelopment:\n  endpoint_url: http://localhost:4566\n  aws_access_key_id: test\n  aws_secret_access_key: test\n  region_name: us-west-2\n\ntesting:\n  endpoint_url: http://localstack-testing.layer-3-cloud:4566\n  aws_access_key_id: test\n  aws_secret_access_key: test\n  region_name: us-east-1\n</code></pre></p>"},{"location":"guide/configuration/#kubernetes-deployment-secrets","title":"Kubernetes Deployment - Secrets","text":"<p>Redis Secret: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-credentials-development\n  namespace: layer-3-cloud\ntype: Opaque\ndata:\n  redis-host: &lt;base64&gt;\n  redis-port: &lt;base64&gt;\n  redis-username: &lt;base64&gt;\n  redis-password: &lt;base64&gt;\n  audit-redis-host: &lt;base64&gt;\n  audit-redis-port: &lt;base64&gt;\n  audit-redis-username: &lt;base64&gt;\n  audit-redis-password: &lt;base64&gt;\n</code></pre></p> <p>LocalStack Secret: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: localstack-credentials-development\n  namespace: layer-3-cloud\ntype: Opaque\ndata:\n  endpoint-url: &lt;base64&gt;\n  aws-access-key-id: &lt;base64&gt;\n  aws-secret-access-key: &lt;base64&gt;\n  region-name: &lt;base64&gt;\n</code></pre></p>"},{"location":"guide/configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<pre><code>graph TD\n    A[Client Request] --&gt; B{Determine Route}\n    B --&gt; C[Check KSTACK_ROUTE env]\n    C --&gt; D[Check K8s ConfigMap]\n    D --&gt; E[Default to 'development']\n    E --&gt; F{Find Configuration}\n    F --&gt; G[Try vault file]\n    G --&gt; H[Try K8s secret]\n    H --&gt; I[Return config or error]\n</code></pre>"},{"location":"guide/configuration/#manual-configuration-access","title":"Manual Configuration Access","text":"<p>You can access configuration directly:</p> <pre><code>from kstack_lib import get_redis_config, get_localstack_config\n\n# Get Redis config for active route\nredis_config = get_redis_config(database='part-raw')\n# Returns: {\"host\": \"...\", \"port\": 6379, \"username\": \"...\", \"password\": \"...\"}\n\n# Get LocalStack config for active route\nlocalstack_config = get_localstack_config()\n# Returns: {\"endpoint_url\": \"...\", \"aws_access_key_id\": \"...\", ...}\n\n# Get config for specific route\ntest_config = get_redis_config(database='part-raw', route='testing')\n</code></pre>"},{"location":"guide/configuration/#error-handling","title":"Error Handling","text":"<p>If configuration cannot be found:</p> <pre><code>from kstack_lib import get_redis_config\n\ntry:\n    config = get_redis_config(database='part-raw')\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\n    # Redis configuration not found for route 'development' database 'part-raw'\n</code></pre>"},{"location":"guide/configuration/#environment-setup","title":"Environment Setup","text":""},{"location":"guide/configuration/#local-development","title":"Local Development","text":"<ol> <li> <p>Clone partsnap-kstack repository:    <pre><code>git clone https://github.com/partsnap/partsnap-kstack.git ~/github/devops/partsnap-kstack\n</code></pre></p> </li> <li> <p>Set route:    <pre><code>export KSTACK_ROUTE=development\n</code></pre></p> </li> <li> <p>Vault files are read automatically from <code>~/github/devops/partsnap-kstack/vault/dev/</code></p> </li> </ol>"},{"location":"guide/configuration/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<ol> <li> <p>Mount ConfigMap in deployment:    <pre><code>envFrom:\n- configMapRef:\n    name: kstack-route\n    namespace: layer-3-cloud\n</code></pre></p> </li> <li> <p>Secrets are read automatically by kstack-lib from <code>layer-3-cloud</code> namespace</p> </li> </ol>"},{"location":"guide/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Never hardcode credentials - Always use vault files or K8s secrets</li> <li>Use environment variables for route in local development</li> <li>Keep vault files in .gitignore (they're already excluded)</li> <li>Rotate secrets regularly in production</li> <li>Use separate routes for different environments (dev, test, staging, prod)</li> </ol>"},{"location":"guide/localstack-client/","title":"LocalStack Client","text":"<p>Guide to using the LocalStack client factory for AWS service emulation.</p>"},{"location":"guide/localstack-client/#overview","title":"Overview","text":"<p>The LocalStack client factory provides boto3/aioboto3 clients configured for LocalStack endpoints, enabling AWS service emulation in development.</p>"},{"location":"guide/localstack-client/#basic-usage","title":"Basic Usage","text":""},{"location":"guide/localstack-client/#s3-client","title":"S3 Client","text":"<pre><code>from kstack_lib import create_localstack_client\n\n# Synchronous S3 client\ns3 = create_localstack_client('s3')\nbuckets = s3.list_buckets()\n\n# Create bucket\ns3.create_bucket(Bucket='my-bucket')\n\n# Upload file\ns3.put_object(\n    Bucket='my-bucket',\n    Key='file.txt',\n    Body=b'Hello World'\n)\n</code></pre>"},{"location":"guide/localstack-client/#async-s3-client","title":"Async S3 Client","text":"<pre><code>from kstack_lib import create_localstack_client\n\nasync def upload_file(data: bytes):\n    s3 = create_localstack_client('s3')\n    async with s3 as client:\n        await client.put_object(\n            Bucket='my-bucket',\n            Key='file.txt',\n            Body=data\n        )\n</code></pre>"},{"location":"guide/localstack-client/#supported-services","title":"Supported Services","text":"<p>All AWS services supported by LocalStack:</p> <ul> <li>S3 - Object storage</li> <li>DynamoDB - NoSQL database</li> <li>RDS - Relational database</li> <li>SQS - Message queues</li> <li>SNS - Notifications</li> <li>Lambda - Serverless functions</li> <li>And more...</li> </ul> <pre><code># DynamoDB\ndynamodb = create_localstack_client('dynamodb')\n\n# SQS\nsqs = create_localstack_client('sqs')\n\n# RDS\nrds = create_localstack_client('rds')\n</code></pre>"},{"location":"guide/localstack-client/#configuration-discovery","title":"Configuration Discovery","text":"<p>LocalStack configuration is discovered from:</p> <ol> <li> <p>Local Development - Vault file:    <pre><code># ~/github/devops/partsnap-kstack/vault/dev/localstack.yaml\ndevelopment:\n  endpoint_url: http://localhost:4566\n  aws_access_key_id: test\n  aws_secret_access_key: test\n  region_name: us-west-2\n</code></pre></p> </li> <li> <p>Kubernetes - Secret:    <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: localstack-credentials-development\n  namespace: layer-3-cloud\ndata:\n  endpoint-url: aHR0cDovL2xvY2Fsc3RhY2stZGV2ZWxvcG1lbnQubGF5ZXItMy1jbG91ZDo0NTY2\n  aws-access-key-id: dGVzdA==\n  aws-secret-access-key: dGVzdA==\n  region-name: dXMtd2VzdC0y\n</code></pre></p> </li> </ol>"},{"location":"guide/localstack-client/#custom-routes","title":"Custom Routes","text":"<p>Specify a custom route:</p> <pre><code># Development route (default)\ns3_dev = create_localstack_client('s3', route='development')\n\n# Testing route\ns3_test = create_localstack_client('s3', route='testing')\n</code></pre>"},{"location":"guide/localstack-client/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use context managers for async clients:    <pre><code>s3 = create_localstack_client('s3')\nasync with s3 as client:\n    await client.list_buckets()\n</code></pre></p> </li> <li> <p>Handle service errors:    <pre><code>from botocore.exceptions import ClientError\n\ntry:\n    s3.create_bucket(Bucket='my-bucket')\nexcept ClientError as e:\n    if e.response['Error']['Code'] == 'BucketAlreadyExists':\n        print(\"Bucket already exists\")\n    else:\n        raise\n</code></pre></p> </li> <li> <p>Use resource helpers:    <pre><code>import boto3\n\n# Get configured endpoint URL\nconfig = get_localstack_config()\n\n# Create resource (higher-level API)\ns3_resource = boto3.resource(\n    's3',\n    endpoint_url=config['endpoint_url'],\n    aws_access_key_id=config['aws_access_key_id'],\n    aws_secret_access_key=config['aws_secret_access_key'],\n    region_name=config['region_name']\n)\n</code></pre></p> </li> </ol>"},{"location":"guide/localstack-client/#api-reference","title":"API Reference","text":"<p>See API Documentation for complete reference.</p>"},{"location":"guide/redis-client/","title":"Redis Client","text":"<p>Comprehensive guide to using the Redis client factory.</p>"},{"location":"guide/redis-client/#overview","title":"Overview","text":"<p>The Redis client factory provides automatic configuration discovery and async/sync context detection for connecting to PartSnap Redis instances.</p>"},{"location":"guide/redis-client/#basic-usage","title":"Basic Usage","text":""},{"location":"guide/redis-client/#synchronous-client","title":"Synchronous Client","text":"<pre><code>from kstack_lib import create_redis_client\n\ndef get_part(mpn: str) -&gt; dict | None:\n    redis = create_redis_client(database='part-raw')\n    data = redis.get(mpn)\n    return json.loads(data) if data else None\n</code></pre>"},{"location":"guide/redis-client/#asynchronous-client","title":"Asynchronous Client","text":"<pre><code>from kstack_lib import create_redis_client\nimport json\n\nasync def cache_part(mpn: str, data: dict) -&gt; None:\n    redis = create_redis_client(database='part-raw')\n    try:\n        await redis.setex(mpn, 3600, json.dumps(data))\n    finally:\n        await redis.aclose()\n</code></pre>"},{"location":"guide/redis-client/#databases","title":"Databases","text":"<p>Two Redis databases are available:</p> <ul> <li><code>part-raw</code>: Main data cache</li> <li><code>part-audit</code>: Audit logging (future)</li> </ul> <pre><code># Use part-raw (default)\nredis = create_redis_client(database='part-raw')\n\n# Use part-audit\nredis_audit = create_redis_client(database='part-audit')\n</code></pre>"},{"location":"guide/redis-client/#configuration-discovery","title":"Configuration Discovery","text":"<p>The client automatically discovers Redis configuration from:</p> <ol> <li> <p>Local Development - Vault file:    <pre><code># ~/github/devops/partsnap-kstack/vault/dev/redis-cloud.yaml\ndevelopment:\n  part-raw:\n    host: redis-development-raw.layer-3-cloud\n    port: 6379\n    username: default\n    password: partsnap-dev\n</code></pre></p> </li> <li> <p>Kubernetes - Secret:    <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-credentials-development\n  namespace: layer-3-cloud\ndata:\n  redis-host: cmVkaXMtZGV2ZWxvcG1lbnQtcmF3LmxheWVyLTMtY2xvdWQ=\n  redis-port: NjM3OQ==\n  redis-username: ZGVmYXVsdA==\n  redis-password: cGFydHNuYXAtZGV2\n</code></pre></p> </li> </ol>"},{"location":"guide/redis-client/#connection-parameters","title":"Connection Parameters","text":"<p>All Redis clients are configured with:</p> <ul> <li><code>decode_responses=True</code> - Automatically decode bytes to strings</li> <li><code>socket_connect_timeout=5</code> - 5 second connection timeout</li> <li><code>socket_timeout=5</code> - 5 second socket timeout</li> </ul>"},{"location":"guide/redis-client/#error-handling","title":"Error Handling","text":"<pre><code>from redis import RedisError\n\nasync def safe_cache_get(mpn: str) -&gt; dict | None:\n    redis = create_redis_client(database='part-raw')\n    try:\n        data = await redis.get(mpn)\n        return json.loads(data) if data else None\n    except RedisError as e:\n        logger.error(f\"Redis error: {e}\")\n        return None\n    finally:\n        await redis.aclose()\n</code></pre>"},{"location":"guide/redis-client/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always close async clients:    <pre><code>redis = create_redis_client()\ntry:\n    await redis.set('key', 'value')\nfinally:\n    await redis.aclose()\n</code></pre></p> </li> <li> <p>Use TTL for cache entries:    <pre><code>await redis.setex('key', 3600, 'value')  # 1 hour TTL\n</code></pre></p> </li> <li> <p>Handle connection errors gracefully:    <pre><code>try:\n    data = await redis.get('key')\nexcept RedisError:\n    # Fall back to database query\n    data = await db.query(...)\n</code></pre></p> </li> </ol>"},{"location":"guide/redis-client/#api-reference","title":"API Reference","text":"<p>See API Documentation for complete reference.</p>"}]}